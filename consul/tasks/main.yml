---
### Get the IP of the host that is running the ansible role
- name: Set variable to default IPv4 address of current host
  set_fact:
    current_host_ip: "{{ ansible_default_ipv4.address }}" # Created automatically by Ansible

### Install required system packages and Docker
- name: Install required system packages
  package:
    name: "{{ install_packages }}"
    state: present
  become: yes
  tags:
    - install_packages

- name: Install docker and docker compose
  include_tasks: docker.yml


### Python dependencies
- name: Install netaddr dependency on controlling host (with --user)
  pip:
    name: netaddr
    extra_args: --user
    delegate_to: 127.0.0.1
  become: false

- name: Install netaddr dependency on controlling host (virtualenv)
  pip:
    name: netaddr
    delegate_to: 127.0.0.1
  become: false


### Install consul in the target system 
- name: Install consul in the target system
  import_tasks: install_latest_consul.yml
  when: consul_latest_bug ==  false

- name: Install Consul specific version
  import_tasks: install_specific_version_consul.yml
  when: consul_latest_bug == true

### Create Consul specific paths
- name: Create Consul paths
  file:
    path: "{{ consul_configd_path }}"
    state: directory
    mode: 0755 
    # Doubt: Change to root?
    owner: consul
    group: consul
    recurse: yes

### Create consul config files (consul, server, service)
# Consul generic config
- name: Create consul.hcl
  file: 
    path: "{{ consul_configd_path }}/consul.hcl"
    state: touch
    mode: 0644
    owner: root
    group: root
    template:
      src: consulhcl.j2
      dest: "{{ consul_configd_path }}/consul.hcl"

# Consul service agent config
- name: Create server.hcl
  file: 
    path: "{{ consul_configd_path }}/server.hcl"
    state: touch
    mode: 0644
    owner: root
    group: root
    template:
      src: serverhcl.j2
      dest: "{{ consul_configd_path }}/server.hcl"

# Consul service declaration and config  
- name: Create Consul service
  file: 
    path: "{{ consul_service_path }}/consul.service"
    state: touch
    mode: 0644
    owner: consul
    group: consul
    template:
      src: consulservice.j2
      dest: "{{ consul_service_path }}/consul.service"


### If this server is the initial one:
    # Generate gossip encryption
    # Generate tls cert and key for this machine and some others (until bootstrap expected)
    # Generate ACL's
- block:



  - name: Create gossip encryption key
    shell: 
      cmd: consul keygen >> gossip.txt
      warn: false
    become: yes

  - name: Create certificate authority
    shell: 
      cmd: consul tls ca create
      wrn: false
    become: yes
  
  - name: Create certificates for nodes
    shell: 
      cmd: consul tls cert create -server -dc {{ consul_datacenter }} -domain consul
      warn: false
    become: yes




### else.
    # Ask for encryption gossip code to the main server
    # Ask for certs and key for my machine to the main server
    # Configure ACL's according to what the main server created
    # - name: Fetch a file form remote host
    #fetch: 
    #src:
    #dest: 
    #flat: yes


### Bring certificates from the main server
# Generate (in main server) tls_cert_file y tls_key_file if needed 
# TODO


### Enable and start consul service

### Set ACL's
#- name: Set Consul ACL's
# import_tasks: acl.yml
